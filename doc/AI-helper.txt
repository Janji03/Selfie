// documentazione GPT

prompt: 
senza scrivere codice spiegami i passi che servono per implementare una pagina di login e signup frontend e backend utilizzando anche un authcontext. 
spiegami come le varie parti interagiscono tra di loro e spiegami come proteggere le rotte dell'app in modo che solo gli utenti loggati possano accedere.

risposta GPT: 
Ecco i passi per implementare una pagina di login e signup con frontend, backend e un AuthContext, insieme alla protezione delle rotte:

1. Backend
1.1 Modello Utente
Crea un modello per rappresentare gli utenti, includendo campi come email, password (hashata) e altre informazioni utili.
Usa una libreria come bcrypt per hashare le password.
1.2 Rotte di autenticazione
Signup:

Endpoint che riceve email e password.
Controlla se l'email esiste già. Se non esiste:
Hasha la password.
Salva l'utente nel database.
Rispondi con un token di autenticazione.
Login:

Endpoint che riceve email e password.
Trova l'utente nel database e verifica la password usando bcrypt.
Se valido, genera un token JWT e restituiscilo.
1.3 Middleware per proteggere le rotte
Implementa un middleware che controlla la presenza e validità del token JWT nelle richieste.
Decodifica il token per ottenere l'ID utente e attacca queste informazioni alla richiesta (req.user).
2. Frontend
2.1 AuthContext
Crea un contesto (AuthContext) per gestire lo stato di autenticazione dell'utente.
Stato: Memorizza il token JWT, l'ID utente, e altre informazioni rilevanti.
Funzioni:
Login: Salva il token JWT nello stato e nel localStorage o sessionStorage.
Logout: Cancella il token e reimposta lo stato.
Check Auth: Controlla se un token valido esiste al caricamento dell'app.
2.2 Pagine di Login e Signup
Form di Login:

L'utente inserisce email e password.
Invii una richiesta al backend per autenticare.
Se la risposta è valida (con un token):
Salva il token nel AuthContext.
Reindirizza l'utente alle pagine protette.
Form di Signup:

L'utente inserisce email, password e conferma password.
Invii una richiesta al backend per registrare il nuovo utente.
Se il signup è valido, puoi eseguire il login automaticamente o reindirizzarlo al login.
2.3 Protezione delle rotte
Usa un componente di ordine superiore o un wrapper che verifica l'autenticazione.
Se il token è presente e valido, consente l'accesso alla rotta.
In caso contrario, reindirizza l'utente alla pagina di login.
2.4 Routing
Configura il router per distinguere tra:
Rotte pubbliche: Accessibili a tutti (es. login, signup).
Rotte protette: Accessibili solo agli utenti autenticati.
3. Interazione tra le varie parti
Login o Signup

L'utente interagisce con il frontend.
Il frontend invia richieste al backend usando API.
Il backend restituisce un token JWT e i dati utente (es. ID o ruoli).
Stato di autenticazione

Il token viene salvato nel AuthContext.
Le future richieste API includono il token JWT nell'intestazione per autenticare l'utente.
Protezione delle rotte

Ogni rotta protetta verifica il contesto (AuthContext) per assicurarsi che l'utente sia loggato.
Se non autenticato, reindirizza al login.